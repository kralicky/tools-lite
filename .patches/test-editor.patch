diff --git a/gopls/internal/test/integration/fake/editor.go b/gopls/internal/test/integration/fake/editor.go
index 0cddf6b18..e1bc57097 100644
--- a/gopls/internal/test/integration/fake/editor.go
+++ b/gopls/internal/test/integration/fake/editor.go
@@ -14,15 +14,13 @@ import (
 	"path"
 	"path/filepath"
 	"regexp"
+	"slices"
 	"strings"
 	"sync"

 	"github.com/kralicky/tools-lite/gopls/internal/protocol"
-	"github.com/kralicky/tools-lite/gopls/internal/protocol/command"
 	"github.com/kralicky/tools-lite/gopls/internal/test/integration/fake/glob"
-	"github.com/kralicky/tools-lite/gopls/internal/util/bug"
 	"github.com/kralicky/tools-lite/gopls/internal/util/pathutil"
-	"github.com/kralicky/tools-lite/gopls/internal/util/slices"
 	"github.com/kralicky/tools-lite/internal/jsonrpc2"
 	"github.com/kralicky/tools-lite/internal/jsonrpc2/servertest"
 	"github.com/kralicky/tools-lite/internal/xcontext"
@@ -31,7 +29,6 @@ import (
 // Editor is a fake client editor.  It keeps track of client state and can be
 // used for writing LSP tests.
 type Editor struct {
-
 	// Server, client, and sandbox are concurrency safe and written only
 	// at construction time, so do not require synchronization.
 	Server     protocol.Server
@@ -1116,37 +1113,6 @@ func (e *Editor) checkBufferLocation(loc protocol.Location) error {
 	return err
 }

-// RunGenerate runs `go generate` non-recursively in the workdir-relative dir
-// path. It does not report any resulting file changes as a watched file
-// change, so must be followed by a call to Workdir.CheckForFileChanges once
-// the generate command has completed.
-// TODO(rFindley): this shouldn't be necessary anymore. Delete it.
-func (e *Editor) RunGenerate(ctx context.Context, dir string) error {
-	if e.Server == nil {
-		return nil
-	}
-	absDir := e.sandbox.Workdir.AbsPath(dir)
-	cmd, err := command.NewGenerateCommand("", command.GenerateArgs{
-		Dir:       protocol.URIFromPath(absDir),
-		Recursive: false,
-	})
-	if err != nil {
-		return err
-	}
-	params := &protocol.ExecuteCommandParams{
-		Command:   cmd.Command,
-		Arguments: cmd.Arguments,
-	}
-	if _, err := e.ExecuteCommand(ctx, params); err != nil {
-		return fmt.Errorf("running generate: %v", err)
-	}
-	// Unfortunately we can't simply poll the workdir for file changes here,
-	// because server-side command may not have completed. In integration tests, we can
-	// Await this state change, but here we must delegate that responsibility to
-	// the caller.
-	return nil
-}
-
 // CodeLens executes a codelens request on the server.
 func (e *Editor) CodeLens(ctx context.Context, path string) ([]protocol.CodeLens, error) {
 	if e.Server == nil {
@@ -1204,7 +1170,7 @@ func (e *Editor) AcceptCompletion(ctx context.Context, loc protocol.Location, it
 		return fmt.Errorf("buffer %q is not open", path)
 	}
 	return e.editBufferLocked(ctx, path, append([]protocol.TextEdit{
-		*item.TextEdit,
+		item.TextEdit.Value.(protocol.TextEdit),
 	}, item.AdditionalTextEdits...))
 }

@@ -1434,7 +1400,7 @@ func (e *Editor) applyWorkspaceEdit(ctx context.Context, wsedit *protocol.Worksp
 			}

 		default:
-			return bug.Errorf("invalid DocumentChange")
+			return fmt.Errorf("invalid DocumentChange")
 		}
 	}
 	return nil
