diff --git a/gopls/internal/cache/fs_overlay.go b/gopls/internal/cache/fs_overlay.go
index 6d81687..e9d672d 100644
--- a/gopls/internal/cache/fs_overlay.go
+++ b/gopls/internal/cache/fs_overlay.go
@@ -6,10 +6,12 @@ package cache

 import (
 	"context"
+	"fmt"
 	"sync"

 	"github.com/kralicky/tools-lite/gopls/internal/file"
 	"github.com/kralicky/tools-lite/gopls/internal/protocol"
+	"github.com/kralicky/tools-lite/internal/xcontext"
 )

 // An overlayFS is a file.Source that keeps track of overlays on top of a
@@ -76,3 +78,111 @@ func (o *overlay) Content() ([]byte, error) { return o.content, nil }
 func (o *overlay) Version() int32           { return o.version }
 func (o *overlay) SameContentsOnDisk() bool { return o.saved }
 func (o *overlay) Kind() file.Kind          { return o.kind }
+
+// Precondition: caller holds s.viewMu lock.
+// TODO(rfindley): move this to fs_overlay.go.
+func (fs *overlayFS) UpdateOverlays(ctx context.Context, changes []file.Modification) error {
+	fs.mu.Lock()
+	defer fs.mu.Unlock()
+
+	for _, c := range changes {
+		o, ok := fs.overlays[c.URI]
+
+		// If the file is not opened in an overlay and the change is on disk,
+		// there's no need to update an overlay. If there is an overlay, we
+		// may need to update the overlay's saved value.
+		if !ok && c.OnDisk {
+			continue
+		}
+
+		// Determine the file kind on open, otherwise, assume it has been cached.
+		var kind file.Kind
+		switch c.Action {
+		case file.Open:
+			kind = file.KindForLang(c.LanguageID)
+		default:
+			if !ok {
+				return fmt.Errorf("updateOverlays: modifying unopened overlay %v", c.URI)
+			}
+			kind = o.kind
+		}
+
+		// Closing a file just deletes its overlay.
+		if c.Action == file.Close {
+			delete(fs.overlays, c.URI)
+			continue
+		}
+
+		// If the file is on disk, check if its content is the same as in the
+		// overlay. Saves and on-disk file changes don't come with the file's
+		// content.
+		text := c.Text
+		if text == nil && (c.Action == file.Save || c.OnDisk) {
+			if !ok {
+				return fmt.Errorf("no known content for overlay for %s", c.Action)
+			}
+			text = o.content
+		}
+		// On-disk changes don't come with versions.
+		version := c.Version
+		if c.OnDisk || c.Action == file.Save {
+			version = o.version
+		}
+		hash := file.HashOf(text)
+		var sameContentOnDisk bool
+		switch c.Action {
+		case file.Delete:
+			// Do nothing. sameContentOnDisk should be false.
+		case file.Save:
+			// Make sure the version and content (if present) is the same.
+			if false && o.version != version { // Client no longer sends the version
+				return fmt.Errorf("updateOverlays: saving %s at version %v, currently at %v", c.URI, c.Version, o.version)
+			}
+			if c.Text != nil && o.hash != hash {
+				return fmt.Errorf("updateOverlays: overlay %s changed on save", c.URI)
+			}
+			sameContentOnDisk = true
+		default:
+			fh := mustReadFile(ctx, fs.delegate, c.URI)
+			_, readErr := fh.Content()
+			sameContentOnDisk = (readErr == nil && fh.Identity().Hash == hash)
+		}
+		o = &overlay{
+			uri:     c.URI,
+			version: version,
+			content: text,
+			kind:    kind,
+			hash:    hash,
+			saved:   sameContentOnDisk,
+		}
+
+		// NOTE: previous versions of this code checked here that the overlay had a
+		// view and file kind (but we don't know why).
+
+		fs.overlays[c.URI] = o
+	}
+
+	return nil
+}
+
+func mustReadFile(ctx context.Context, fs file.Source, uri protocol.DocumentURI) file.Handle {
+	ctx = xcontext.Detach(ctx)
+	fh, err := fs.ReadFile(ctx, uri)
+	if err != nil {
+		// ReadFile cannot fail with an uncancellable context.
+		return brokenFile{uri, err}
+	}
+	return fh
+}
+
+// A brokenFile represents an unexpected failure to read a file.
+type brokenFile struct {
+	uri protocol.DocumentURI
+	err error
+}
+
+func (b brokenFile) URI() protocol.DocumentURI { return b.uri }
+func (b brokenFile) Identity() file.Identity   { return file.Identity{URI: b.uri} }
+func (b brokenFile) SameContentsOnDisk() bool  { return false }
+func (b brokenFile) Version() int32            { return 0 }
+func (b brokenFile) Content() ([]byte, error)  { return nil, b.err }
